# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  backend:
    build:
      context: ./backend
    env_file: ./backend/.env
    environment:
      - NODE_ENV=dev
      - MONGO_URI=mongodb://mongo:27017
    ports:
      - 3000:3000
    command: node --watch-path ./src index.js
    volumes:
      - ./backend/src:/usr/src/app/src
      - ./backend/tests:/usr/src/app/tests
      - ./backend/index.js:/usr/src/app/index.js

  frontend:
    build:
      context: ./frontend
    env_file: ./frontend/.env
    environment:
      - NODE_ENV=dev
    ports:
      - 5173:5173
    volumes:
      - ./frontend/public:/usr/src/app/public
      - ./frontend/src:/usr/src/app/src
      - ./frontend/index.html:/usr/src/app/index.html
      - ./frontend/vite.config.js:/usr/src/app/vite.config.js

  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=cdj
    volumes:
      - mongo-data:/data/db

volumes:
  mongo-data:

# Need a MongoDB service separate; we're not coding anything with it, just need DB running
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

